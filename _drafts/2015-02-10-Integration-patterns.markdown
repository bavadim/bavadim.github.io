---
layout: post
title: "Про системную интеграцию и обмен сообщениями"
comments: true
categories: programming
---

Практика построения больших программ из более мелких слабосвязанных подсистем вошла в обиход разработчиков масштабируемых систем далеко не вчера. Проектирование и реализация таких систем дело увлекательное и позновательное, если присутствкет понимание основопологающих принципов. С другой стороны задача интеграции какой-нибудь SAP с 1С может и не быть сущим адом для того, кто владеет матчастью. Существует много книг по искусству интеграции, например книга [Шаблоны интеграции корпоративных приложений](http://www.ozon.ru/context/detail/id/3083192/). В этой заметке я постараюсь кратко и системно изложить принципы и свой опыт по теме.

## О сути вопроса

Системная интеграция достаточно общий термин, под которым можно понимать как процесс технического объединения подсистем в одну систему, так и различные обсуждения бюджетов с заказчиком в бане. В этой заметке речь пойдет о технической стороне вопроса. Дадим такое определение:

**Интеграция систем** - это процесс создания условий для передачи информации определенного типа из одних систем в другие по определенным правилам с целью объединения систем в одну.

Интеграция обычно сопряжена с кучей проблем. Зачастую мы можем весьма ограничено менять существующие системы или не можем делать этого вовсе. Часто инегрируемые системы стары и писались далеко не для людей, зато консультация авторов или их протеже ("сертифицированных специалистов") стоит немалых денег. Но все эти проблемы обычно решаются и не сильно досаждают по окончании интеграции. Настаящая головная боль - это сильная связанность подсистем. Сильная связанность проявляет себя когда вдруг  при обновлении формата фйлов в системе ECM перестают работать CRM и трекер задач. Или, например, когда заменить не удовлетваряющий вас трекер задач на что-то стоящее невозможно из-за того, что его интеграция с CI, CRM и биллингом завязана на схему БД. Сильно связанные системы - плохая и дорогая штука, пьющая литры крови у пользователей и людей, вовлеченных в обслуживание системы (которых обычно весьма много). Кроме связанности системы есть и другие критерии качества интеграции, такие как трудоемкость реализации, производительность, масштабируемость или надежность. 

Итак, при проектировании интеграционного решения всегда приходится искать баланс между следующими свойствами:

- связанность
- масштабируемость
- производительность
- простота
- цена

К сожалению не все эти свойства можно численно измерять, а тем более посчитать численно качество интеграции. Но мы все же можем "на глаз" оценить качество того или иного типа интеграции в применении к нашей задаче. Всего существует четыре типа интеграций:

- передача файла - универсальный канал, низкая пропускная способность, кастомная адресация, временная несвязанность
- общая БД - не универсальный канал, кастомная адресацияб высокая пропускная способность, временная несвязанность
- удаленный вызов процедуры - отстой
- обмен сообщениями

Для каждого из этих способов я попытался оценить его свойства. Вот что получилось.

### Передача файла

Файлы позволяют добиться временной независимости интегрируемых систем (асинхронной обработки), ведь приложению-отправителю достаточно создать файл и совсем не обязательно ждать пока его обработает приложение-получатель. И наоборот приложению-получателю не обязательно быть доступным в момент создания файла. Это свойство можно использовать, чтобы уменьшить связанность и увеличить масштабируемость. 

Передача файла обладает низкой производительностью, так как ввод-вывод на диск операция мягко скажем не быстрая. Тем не мение это самый простой на первый взгляд способ интеграции. Большинство приложений умеют передовать информацию через файлы без каких-либо доработок. Но нужно учитывать, что файлы имеют определенный формат, с которым все интегрируемые приложения должны уметь работать. Поэтому нужно хорошо обдумать вопрос является ли для конкретной задачи интеграция через передачу фалов самым простым и дешевым способом.

### Общая БД

Особенностью этой схемы является то, что она имеет смысл для обмена хорошо структурированными данными. Как и передача файлов, общаяя БД позволяет выполнить асинхронную обработку, но при этом обеспечивает высокую пропускную способность. Другим отличием от передачи файлов является большая степень связанности интегрируемых систем. Это происходит потому, что формат файлов в отличии от схемы данных меняется реже и чаще рассматривается разработчиками как внешний интерфейс. Я встречал несколько более-менее удачных решений интеграции через БД, но во всех них таблицы, служащие для интеграции строго отделяли от данных приложения. С масштабируемостью у этого типа, как и у всего что связано с реляционными СУБД, большая проблема.

### Удаленный вызов процедур

Самый неоднозначный пункт. Сюда можно отнести Statefull EJB и RESTFul сервисы. Про первый случай я может быть напишу отдельную заметку в серии будни осинизатора. Но сейчас, все же, я буду отталкиваться от свойств RESTFul. 

Связанность примерно такая же как и у предыдущих типов. Вместо схемы БД или формата файлов клиенту нужно знать API сервера. Сервер должен быть доступен в момент обращения клиента и часто клиент должен сам запрашивать результат обработки запроса. Поэтому я в своем личном рейтинге ставлю этот способ по простоте масштабируемости почти в самый конец (ниже только общая БД). Производительность может быть на хорошем уровне. А вот простота и цена решения сильно зависит от задачи. Если система-сервер имеет хорошее и полное API, то этот тип интеграции может быть самым простым из всех. К сожалению так бывает не всегда.

### Обмен сообщениями

Все вышеописаные способы интеграции имеют одну общую особенность - они оговаривают лишь канал обмена сообщениями (ФС, БД, API), но не оговаривают тип информации и не вводят четкого протокола обмена, остовляя большой простор для творчества. Эта свобода обычно приводит к сильносвязанной системе с последствиями, описанными в начале раздела. Кроме того многообразие делает невозможной стандартизацию и следовательно написание библиотек для интеграции. Само собой такое положение вещей не устраивало человечество и появился самый определенный и стандертизованный способ интеграции систем - обмен сообщениями. Далее мы будем говорить о нем.

Обмен сообщениями - это тип интеграции приложений, специально разработанный для того чтобы обеспечить минимальную связанность и максимальную масштабируемость интеграционного решения. Кроме того обычно сохраняется разумная производительность, сложность и цена решения.

Обмен сообщениями построен на следующих концепциях: 

- Сообщение
- конечная точка
- Канал
- потоки и фильтры
- преобразование
- маршрутизация

Сообщения представляют собой атомарную информацию, передаваемую между системами. Сообщения создаются и принимаются конечными точками, встроенными в интегрируемые системы. Из конечных точек сообщения попадают в каналы. По каналам сообщения передаются между системами. Каналы обычно физически реализованны на базе специального класса программ - систем обмена сообщениями (Message orientated midelware, MoM). Каналы должны надежно хранить сообщения вне зависимости от того, работают ли системы-клиенты, посылающие и принимающие сообщения. Кроме каналов, которые хранят сообщения и обеспечивают асинхронную передачу, существуют потоки. Потоки - это упрощенная версия каналов без поддержки асинхронности и хранения сообщений. Обычно потоки используются для связи элементов, служащих для фильтрации, преобразования и маршрутизации сообщений. Фильтры позволяют пропускать часть сообщений из входящего потока или канала в исходящий. Преобразования позволяют изменить сообщения в потоках или каналах. Маршрутизация позволяет отпрвить входящее сообщение в один из нескольких исходящих потоков или каналов.

Теперь давайте 
Источники связанности (что где когда):

- временная согласованность
- адресация и канал
- формат сообщений

## Мыслим асинхронно

Два замечательных свойства асинхронности:

- Отправить и забыть
- получить когда удобно

Нужен элемент системы для:

- надежность хранения
- постоянная доступность

## Адресация и канал

Типы каналов:

- точка-точка
- публикация-подписка

Потоки и каналы (соединения порты)

канал типа данных, канал недопустимых сообщений, канал недоставленных сообщений


## Формат сообщений

Формат - ???

Сообщения состоят из:

- метаданных, использующихся системой доставки сообщений
- тела с информацией

Уровни форматов (и преобразований):

- транспортный (Channel Adapter)
- синтаксис (шаблонизаторы, xml заторы)
- тип данных (имена полей и т.д. xslt)
- семантика данных ()

Информация бывает трех типов:

- команды (Command Message)
- события (Event Message)
- данные (Document Message)

## Пример
